#include <PWMServo.h>
// PID library from http://playground.arduino.cc/Code/PIDLibrary
#include <PID_v1.h>
// Thermistor table is generated by ../thermistor.py
typedef struct {
	int t;
	int v;
} ThermEntry;

void smartDelay(int);

const int thermt_count = 13;
ThermEntry thermt[thermt_count] = {
	{29, 383},
	{37, 468},
	{44, 545},
	{51, 607},
	{57, 670},
	{63, 736},
	{70, 761},
	{76, 796},
	{82, 825},
	{87, 850},
	{91, 869},
	{94, 883},
	{100, 890},
};

const int gantry_enable_pin = 21;
const int gantry_in3_pin = 20;
const int gantry_in4_pin = 19;
const int gantry_limit_switch = 18;
const int gantry_station_switch = 17;
const int gantry_brake_pin = 16;

const int crane_servo_pin = 15;
const int claw_servo_pin = 14;

const int start_button_pin = 0;
const int heating_coil_pin = 1;
const int temperature_analog_pin = 8; // analog pin; digital pin 13

void initTemperature() {
  pinMode(A8,INPUT);
}

int getTemperature() {
  int value = analogRead(temperature_analog_pin);
  if (value <= thermt[0].v) { return thermt[0].t; }
  if (value >= thermt[thermt_count-1].v) { return thermt[thermt_count-1].t; }
  for (int idx = 1; idx < thermt_count; idx++) {
    if (value == thermt[idx].v) { return thermt[idx].t; }
    if (value < thermt[idx].v) {
      // interpolate
      float ratio = (float)(thermt[idx].t - thermt[idx-1].t) / (float)(thermt[idx].v - thermt[idx-1].v);
      return thermt[idx-1].t + (ratio * (value-thermt[idx-1].v));
    }
  }
  return -1;
}

const int MOTOR_OFF = 0;
const int MOTOR_FORWARD = 1;
const int MOTOR_BACKWARD = 2;
const int MOTOR_BRAKE = 3;

void initGantry() {
  pinMode(gantry_enable_pin, OUTPUT);
  pinMode(gantry_in3_pin, OUTPUT);
  pinMode(gantry_in4_pin, OUTPUT);
  digitalWrite(gantry_brake_pin, LOW);
  pinMode(gantry_brake_pin, OUTPUT);
  gantryMotor(MOTOR_OFF);
  pinMode(gantry_limit_switch, INPUT_PULLUP);
  pinMode(gantry_station_switch, INPUT_PULLUP);
}

PWMServo craneServo;


const int CRANE_MIN = 20;
const int CRANE_MAX = 105;
int cranePos;

const int CRANE_UP = CRANE_MAX;
const int CRANE_LOAD = 75;
const int CRANE_DOWN = CRANE_MIN;

void initCrane() {
  craneServo.attach(crane_servo_pin);
  cranePos = CRANE_UP;
  craneServo.write(CRANE_UP);
}

void setCrane(int angle) {
  if (angle < CRANE_MIN) { angle = CRANE_MIN; }
  if (angle > CRANE_MAX) { angle = CRANE_MAX; }
  int dir = (angle>cranePos)?1:-1;
  while (cranePos != angle) {
    cranePos += dir;
    craneServo.write(cranePos);
    smartDelay(30);
  }
  cranePos = angle;
  craneServo.write(angle);
}

void craneUp() {
  setCrane(CRANE_UP);
}

void craneLoad() {
  setCrane(CRANE_LOAD);
}

void craneDown() {
  setCrane(CRANE_DOWN);
}

const int CLAW_MIN = 25;
const int CLAW_MAX = 85;
const int CLAW_OPEN = 43;
const int CLAW_CLOSED = 27;

int clawPos;

PWMServo clawServo;
void initClaw() {
  clawServo.attach(claw_servo_pin);
  clawPos = CLAW_OPEN;
  clawServo.write(clawPos);
}

void setClaw(int angle) {
  if (angle < CLAW_MIN) { angle = CLAW_MIN; }
  if (angle > CLAW_MAX) { angle = CLAW_MAX; }
  int dir = (angle>clawPos)?1:-1;
  while (clawPos != angle) {
    clawPos += dir;
    clawServo.write(clawPos);
    smartDelay(20);
  }
}

void closeClaw() {
  setClaw(CLAW_CLOSED);
}

void openClaw() {
  setClaw(CLAW_OPEN);
}

void gantryMotor(int direction) {
  switch(direction) {
  case MOTOR_OFF:
    digitalWrite(gantry_brake_pin, LOW);
    digitalWrite(gantry_enable_pin, LOW);
    digitalWrite(gantry_in3_pin, LOW);
    digitalWrite(gantry_in4_pin, LOW);
    break;
  case MOTOR_FORWARD:
    digitalWrite(gantry_brake_pin, LOW);
    digitalWrite(gantry_enable_pin, LOW);
    digitalWrite(gantry_in3_pin, HIGH);
    digitalWrite(gantry_in4_pin, LOW);
    digitalWrite(gantry_enable_pin, HIGH);
    break;
  case MOTOR_BACKWARD:
    digitalWrite(gantry_brake_pin, LOW);
    digitalWrite(gantry_enable_pin, LOW);
    digitalWrite(gantry_in3_pin, LOW);
    digitalWrite(gantry_in4_pin, HIGH);
    digitalWrite(gantry_enable_pin, HIGH);
    break;
  case MOTOR_BRAKE:
    digitalWrite(gantry_enable_pin, LOW);
    digitalWrite(gantry_in3_pin, LOW);
    digitalWrite(gantry_in4_pin, LOW);
    digitalWrite(gantry_brake_pin, HIGH);
    break;
  }
}

void gantryHome() {
  // Clumsily PWM the motor to limit speed.
  gantryMotor(MOTOR_BACKWARD);
  while (digitalRead(gantry_limit_switch) == HIGH);
  gantryMotor(MOTOR_BRAKE);
  smartDelay(500);
  gantryMotor(MOTOR_OFF);
  smartDelay(500); // settle oscillations
}

void debounceWaitFor(int pin, int value) {
  int state = digitalRead(pin);
  delayMicroseconds(50);
  int newState = digitalRead(pin);
  while ((newState != state) || (value != state)) {
    state = newState;
    newState = digitalRead(pin);
    delayMicroseconds(50);
  }
}

void gantryNextStation(int stations = 1,boolean forward = true) {
  gantryMotor(forward?MOTOR_FORWARD:MOTOR_BACKWARD);
  while (stations > 0) {
    smartDelay(250);
    debounceWaitFor(gantry_station_switch,HIGH);
    debounceWaitFor(gantry_station_switch,LOW);
    stations--;
  }
  gantryMotor(MOTOR_BRAKE);
  smartDelay(500);
  gantryMotor(MOTOR_OFF);
  smartDelay(500); // settle oscillations
}

void switchHeater(boolean on = false) {
  digitalWrite(heating_coil_pin, on?HIGH:LOW);
}


// from PID relay example
double hSP, hIn, hOut;
PID hPID(&hIn, &hOut, &hSP,5,1,2, DIRECT);
unsigned long windowStartTime;

void initHeater() {
  digitalWrite(heating_coil_pin, LOW);
  pinMode(heating_coil_pin, OUTPUT);
  switchHeater(false);
  hSP = 0;
  hPID.SetOutputLimits(0, 5000);
  hPID.SetMode(AUTOMATIC);
  windowStartTime = millis();
}

void setHeat(int value = 0) {
  if (value == 0) {
    switchHeater(false);
  }
  if (value > 90) value = 90; // clamp at safe value
  hSP = value;
}

unsigned long shutdownWhen = 0;
void updateTemp() {
  int cur = getTemperature();
  hIn = cur;
  hPID.Compute();
  unsigned long now = millis();
  if((now - windowStartTime) > 5000)
  { //time to shift the Relay Window
    windowStartTime += 5000;
  }
  if (hSP <= 0) { switchHeater(false); return; }
  if (cur > 95) {
    shutdownWhen = now;
    switchHeater(false);
    return;
  }
  if ((now - shutdownWhen) < 2000) {
    switchHeater(false);
    return;
  }  
  switchHeater(hOut > (now - windowStartTime));
}

void setup() {
  initHeater();
  initGantry();
  initCrane();
  initClaw();
  pinMode(start_button_pin, INPUT_PULLUP);
  Serial.begin(19200);
}

boolean waitForTemp(int temp, int timeout) {
  setHeat(temp);
  while (hIn < temp) { 
    Serial.println(hIn);
    smartDelay(1000);
    timeout--;
    if (timeout <= 0) { setHeat(0); Serial.println("TEMPERATURE WAIT FAILED"); return false; }
  }
  return true;
}

void run() {
  Serial.println("Running program.");
  openClaw();
  craneUp();
  Serial.println("0. Home");
  gantryHome();
  Serial.println("1. Preheat");
  if (!waitForTemp(75,150)) {
    Serial.println("*** EGGBORT EGGBOT EGGBORT ***");
    return;
  }
  setHeat(90);
  Serial.println("2. To loading station");
  gantryNextStation();
  Serial.println("3. Acquire egg");
  openClaw();
  craneLoad();
  closeClaw();
  craneUp();
  Serial.println("4. To cooking station");
  gantryNextStation(2);
  smartDelay(500);
  Serial.println("5. Cook egg");
  if (!waitForTemp(75,100)) {
    Serial.println("*** EGGBORT EGGBOT EGGBORT ***");
    return;
  }
  craneDown();
  for (int i = 60*3; i > 0; i--) {
    Serial.print("Cooking at ");
    Serial.print(getTemperature());
    Serial.print(", ");
    Serial.print(i);
    Serial.println(" seconds left...");
    smartDelay(1000);
  }
  Serial.println("Done.");
  setHeat(0);
  craneUp();
  Serial.println("6. To cooling station");
  gantryNextStation(1,false);
  Serial.println("7. Cool egg");
  craneDown();
  smartDelay(8000);
  craneUp();
  Serial.println("8. To unloading station");
  gantryHome();
  gantryNextStation();
  Serial.println("9. Deposit egg");
  craneLoad();
  openClaw();
  craneUp();
  gantryHome();
  Serial.println("10. Cooldown");
  setHeat(0);
  Serial.println("Egg cooking procedure complete.");
}

void loop() {
  if (Serial.available()) {
    int c = Serial.read();
    switch (c) {
      case '+':
      case '=':
        setCrane(cranePos + 1);
        Serial.print("CRANE: ");
        Serial.println(cranePos);
        break;
      case '-':
        setCrane(cranePos - 1);
        Serial.print("CRANE: ");
        Serial.println(cranePos);
        break;
      case '[':
        setClaw(clawPos - 1);
        Serial.print("CLAW: ");
        Serial.println(clawPos);
        break;
      case ']':
        setClaw(clawPos + 1);
        Serial.print("CLAW: ");
        Serial.println(clawPos);
        break;       
      case 'h':
      case 'H':
        Serial.println("Homing.");
        gantryHome();
        break;
      case 's':
      case 'S':
        Serial.println("Next station.");
        gantryNextStation();
        break;
      case 'c':
      case 'C':
        Serial.println("*Claw close.");
        closeClaw();
        break;
      case 'o':
      case 'O':
        Serial.println("*Claw open.");
        openClaw();
        break;
      case 'u':
      case 'U':
        Serial.println("+Crane up.");
        craneUp();
        break;
      case 'd':
      case 'D':
        Serial.println("+Crane down.");
        craneDown();
        break;
      case 'l':
      case 'L':
        Serial.println("+Crane load.");
        craneLoad();
        break;
      case 'p':
        Serial.println("serial PID: temp at 70");
        setHeat(70);
        break;
      case 'z':
        Serial.println("heat off");
        setHeat(0);
        break;
      case 't':
        Serial.println("^^^ Test heater (3 seconds) ^^^");
        switchHeater(true);
        smartDelay(3000);
        switchHeater(false);
        break;
      case 'T':
        Serial.println("^^^ Test heater (12 seconds) ^^^");
        switchHeater(true);
        smartDelay(12000);
        switchHeater(false);
        break;
      case 'r':
      case 'R':
        run();
        break;
        
    }
  }
  if (digitalRead(start_button_pin) == LOW) {
    run();
  }
  updateTemp();
}
  
void smartDelay(int ms) {
  unsigned long start = millis();
  while (ms > 10) {
    updateTemp();
    delay(8);
    unsigned long t = millis();
    ms -= (t-start);
    start = t;
  }
  delay(ms);
}
    
